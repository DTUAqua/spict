% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/manage.R
\name{get.TAC}
\alias{get.TAC}
\title{Estimate Total Allowable Catch (TAC)}
\usage{
get.TAC(repin, reps = 1, fractileC = 0.5, fractileFFmsy = 0.5,
  fractileBBmsy = 0.5, pa = 0, prob = 0.95, bbmsyfrac = 0.3,
  stabilityClause = FALSE, lower = 0.8, upper = 1.2, amtint = 1,
  npriorSD = 2, getFit = FALSE)
}
\arguments{
\item{repin}{Result list as output from fit.spict().}

\item{reps}{The number of stochastic samples of the TAC
recommendation (not used for this HCR).}

\item{fractileC}{The fractile of the catch distribution to be used
for setting the TAC. Default is median (0.5).}

\item{fractileFFmsy}{The fractile of the distribution of
F/Fmsy. Default is 0.5 (median).}

\item{fractileBBmsy}{The fractile of the distribution of
B/Bmsy. Default is 0.5 (median).}

\item{pa}{Logical; indicating if the precautionary approach should
be applied (reduce F if P(B<Blim) < prob). Default is FALSE.}

\item{prob}{Probability for the precautionary approach (see
argument 'pa', default is 0.95).}

\item{bbmsyfrac}{Fraction of B/Bmsy for precautionary approach}

\item{stabilityClause}{Logical; If true F multiplication factor is
bound between two values set in lower and upper. Default:
FALSE.}

\item{lower}{Lower bound of the stability clause. Default is 0.8,
used if uncertaintyCap = TRUE.}

\item{upper}{Upper bound of the stability clause. Default is 1.2,
used if uncertaintyCap = TRUE.}

\item{amtint}{Assessment interval. Default is 1, which indicates
annual assessments.}

\item{npriorSD}{Standard deviation of logn prior (Default: 2). If
NA, the logn prior is removed}

\item{getFit}{Logical; if TRUE the fitted results list with
adjusted fsihing mortality value is returned. Default is FALSE.}
}
\value{
A list with estimated TAC based on harvest control rule
    settings or the fitted rep list with adjusted fishing mortality
    values if getFit = TRUE and a logical value indicating if the
    stability clause was hit or not (if in use).
}
\examples{
data(pol)
rep <- fit.spict(pol$albacore)
get.TAC(rep)
}
